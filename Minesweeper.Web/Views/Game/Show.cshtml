@using Minesweeper.Common;

@model GameViewModel

@{
    ViewBag.Title = $"Minesweeper: {(Model.Game.Board.Rows > 10 ? "Hard" : (Model.Game.Board.Rows < 10) ? "Easy" : "Medium")}";
}

<h2>@ViewBag.Title.</h2>
<p>@Html.ActionLink("Leaderboard", "Leaderboard", "Home", new { rows = Model.Game.Board.Rows, columns = Model.Game.Board.Columns, mines = Model.Game.Mines }, null)</p>
<h3>
    @if (Model.Game.IsWon)
    {
        <span>You won!</span>
        <span>Score: @Model.Game.Score</span>
    }
    else if (Model.Game.IsLost)
    {
        <span class="text-danger">You lost!</span>
        <span>Score: @Model.Game.Score</span>
    }
    else
    {
        <span>@Model.Game.FlagsLeft flags left.</span>
        <span>Score: @Model.Game.Score</span>
    }
</h3>

<h4 id="elapsed">&nbsp;</h4>

@for (int row = 0; row < Model.Game.Board.Rows; row++)
{
    <div>
        @for (int column = 0; column < Model.Game.Board.Columns; column++)
        {
        <div class="text-center cell">
            @{
                Cell cell = Model.Game.Board.GetAt(row, column);

                switch (cell.State)
                {
                    case CellState.Pristine:
                        if (!Model.Game.IsGameOver)
                        {
                            <a href="@Url.Action("Mark", new { row = row, column = column })">
                                <i class="glyphicon glyphicon-screenshot"></i>
                            </a>
                            <a href="@Url.Action("Flag", new { row = row, column = column })">
                                <i class="glyphicon glyphicon-flag small"></i>
                            </a>
                        }
                        else if (cell.IsMine)
                        {
                            <i class="glyphicon glyphicon-certificate text-success"></i>
                        }
                        else
                        {
                            <span>&nbsp;</span>
                        }
                        break;
                    case CellState.Flagged:
                        <a href="@Url.Action("Clear", new { row = row, column = column })">
                            <i class="glyphicon glyphicon-flag text-danger"></i>
                        </a>
                        break;
                    case CellState.Revealed:
                        if (cell.IsMine)
                        {
                            <i class="glyphicon glyphicon-certificate text-danger"></i>
                        }
                        else if (cell.SurroundingMines > 0)
                        {

                            <a href="@Url.Action("RevealSurroundings", new { row = row, column = column })">
                                @cell.SurroundingMines
                            </a>
                        }
                        else
                        {
                            <span>&nbsp;</span>
                        }
                        break;
                }
            }
        </div>
        }
    </div>
}

@section Scripts {
    <script type="text/javascript">
        var elapsed = @Model.Elapsed;
        function setElapsed(elapsedTime) {
            $("#elapsed").text((Math.floor(elapsedTime)) / 1000);
        }
        setElapsed(elapsed);
    </script>

    @if (!Model.Game.IsGameOver)
    {
        <script type="text/javascript">
            var interval = 20;
            setInterval(function () {
                elapsed += interval;
                setElapsed(elapsed);
            }, interval);
        </script>
    }
}
